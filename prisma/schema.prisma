generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int          @id @default(autoincrement())
  name           String?
  email          String?      @unique
  emailVerified  DateTime?    @map("email_verified")
  image          String?
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @default(now()) @map("updated_at")
  hashedPassword String       @map("hashed_password")
  player         Player?
  userInvites    UserInvite[] @relation("user_invitesTousers")

  @@map("users")
}

model migrations {
  id     Int      @id @default(autoincrement())
  name   String
  run_on DateTime
}

model accounts {
  id                   Int       @id @default(autoincrement())
  compound_id          String    @unique
  user_id              Int
  provider_type        String
  provider_id          String
  provider_account_id  String
  refresh_token        String?
  access_token         String?
  access_token_expires DateTime?
  created_at           DateTime  @default(now())
  updated_at           DateTime  @default(now())

  @@index([provider_account_id], name: "provider_account_id")
  @@index([provider_id], name: "provider_id")
  @@index([user_id], name: "user_id")
}

model sessions {
  id            Int      @id @default(autoincrement())
  user_id       Int
  expires       DateTime
  session_token String   @unique
  access_token  String   @unique
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
}

model users {
  id                  Int                   @id @default(autoincrement())
  name                String?
  email               String?               @unique
  email_verified      DateTime?
  image               String?
  created_at          DateTime              @default(now())
  updated_at          DateTime              @default(now())
  players             players[]
  viewedByPermissions viewing_permissions[] @relation("UsersToViewees")
  viewerPermissions   viewing_permissions[] @relation("UsersToViewers")
}

model verification_requests {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Player {
  user_id                     Int     @id
  bio                         String?
  academicEngagementScore     Int?    @map("academic_engagement_score")
  acaademicEngagementComments String? @map("academic_engagement_comments")
  advisingScore               Int?    @map("advising_score")
  advisingComments            String? @map("advising_comments")
  athleticScore               Int?    @map("athletic_score")
  athleticComments            String? @map("athletic_comments")
  gpa                         Float?
  disciplinaryActions         String? @map("disciplinary_actions")
  schoolAbsences              String? @map("school_absences")
  advisingAbsences            String? @map("advising_absences")
  athleticAbsences            String? @map("athletic_absences")
  bmi                         Float?
  healthAndWellness           String? @map("health_and_wellness")
  beepTest                    String? @map("beep_test")
  mileTime                    String? @map("mile_time")
  highlights                  String?
  user                        User    @relation(fields: [user_id], references: [id])

  @@map("players")
}

model UserInvite {
  id         String   @id @default(dbgenerated())
  created_at DateTime @default(now())
  user_id    Int
  user       User     @relation("user_invitesTousers", fields: [user_id], references: [id])

  @@map("user_invites")
}

model viewing_permissions {
  id                Int     @id
  viewer_id         Int?
  viewee_id         Int?
  relationship_type String?
  viewee            users?  @relation("UsersToViewees", fields: [viewee_id], references: [id])
  viewer            users?  @relation("UsersToViewers", fields: [viewer_id], references: [id])
}
